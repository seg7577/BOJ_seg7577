
#include <iostream>
#include <string>
#include<algorithm>  
using namespace std;

class Test {
    int n; //복사가 일어날 때, n에 저장된 value(t1에서 n의 value)를 복사하게 된다.
    int* m; //포인터로 선언되어 생성자에서 동적 할당을 받아 초기화된다.

    //넘어가는 과정에서 m 1차원 배열은 배열 m에 저장되어 있는 값을 복사 하는 것이 아닌 배열 m의 주소를 복사하는 것이다
    //여기서 저장은 "얕은 복사"
public:
    Test(int x, int* y)//일차적으로 배열의 주소를 가져오기 위해 *로 선언
    {  // Default Constructor

        n = x;
        //정수형 값을 얕은 복사하고

        m = new int[5];
        //동적할당
        //new는 주소를 리턴해주기 때문에 new의 값을 저장하는 변수는 포인터변수여야 합니다

        copy(y, y + 5, m);
        //copy(src, src+원하는 범위, dst);
        //y의 주소값들을 죄다 복사해서 각 배열에 채워 넣음
    }
    Test(const Test& obj)
    {  // Copy Constructor
        n = obj.n;

        m = new int[5];
        // 깊은 복사

        copy(obj.m, obj.m + 5, m);
        //copy(src, src+원하는 범위, dst);
    }
    int getN()
    {
        return n;
    }
    void printM()
    {
        for (int i = 0; i < 5; i++)
            cout << m[i] << " ";

        cout << '\n';
    }
    void setM(int idx, int t)
    {
        m[idx] = t;
    }
};

int main() {
    int a = 150;
    int arr[5] = { 0, 1, 2, 3, 4 };
    Test t1(300, arr);  // Default Constructor 호출
    Test t2(t1);  // Copy Constructor 호출

    cout << "<Compare value of n>" << endl;
    cout << t1.getN() << endl;
    cout << t2.getN() << endl;

    cout << "<Compare value of m>" << endl;
    t1.printM();
    t2.printM();

    t2.setM(2, 80);

    cout << "<After the change of m's value, Compare value of m>" << endl;
    t1.printM();
    t2.printM();
}

////복사 생성자는 다음과 같은 상황에서 주로 사용됩니다.
//1. 객체가 함수에 인수로 전달될 때
//2. 함수가 객체를 반환값으로 반환할 때
//3. 새로운 객체를 같은 클래스 타입의 기존 객체와 똑같이 초기화할 때
